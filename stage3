%% stage1
%% Grammar
%% <blck> ::= begin <stmts> end
%% 
%% <stmts> ::= <empty>
%%          | <stmt> <stmts>
%% 
%% <stmt> ::= pass
%%          | declare <name>
%%          | use <name>
%%          | <blck>
stmt([pass|Tail], Tail, pass, Declared, Vars). 
stmt([use,X|Tail], Tail, use(X), Declared, Declared) :- 
    member(X, Declared), not(nonTerminal(X)).
stmt([declare,X|Tail], Tail, declare(X), Declared, [X|Declared]) :- 
    not(nonTerminal(X)).
stmt(Block, Tail, Parse, Declared, Declared) :-
    blck(Block, Tail, Parse).
stmt(Stmt, Parse, Declared, Vars) :-
    stmt(Stmt, [], Parse, Declared, Vars).

stmts(Stmt, Tail, [Parse]) :- 
    stmt(Stmt, Tail, Parse).
stmts([pass|Stmts], Tail, [P|Parse]) :-
    stmt([pass], P), 
    stmts(Stmts, Tail, Parse).
stmts([use,X|Stmts], Tail, [P|Parse]) :-
    stmt([use,X], P),
    stmts(Stmts, Tail, Parse).
stmts([declare,X|Stmts], Tail, [P|Parse]) :-
    stmt([declare,X], P),
    stmts(Stmts, Tail, Parse).
stmts(Stmts, Parse) :-
    stmts(Stmts, [], Parse).

blck([begin,end|Tail], Tail, Parse) :-
    Parse = [].
blck([begin|Stmts], Tail, Parse) :-
    stmts(Stmts, [end|Tail], Parse).
blck(Block, Parse) :-
    blck(Block, [], Parse).

legal(Block, Parse) :-
    blck(Block, Parse).
%% blck([begin|Stmts], Tail, Parse) :- %% WHY DOES THIS WORK?!?
%%     select(end, Stmts, NewStmts), stmts(NewStmts, Tail, Parse).


nonTerminal(pass).
nonTerminal(use).
nonTerminal(declare).
nonTerminal(begin).
nonTerminal(end).
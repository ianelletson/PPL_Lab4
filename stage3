%% stage1
%% Grammar
%% <blck> ::= begin <stmts> end
%% 
%% <stmts> ::= <empty>
%%          | <stmt> <stmts>
%% 
%% <stmt> ::= pass
%%          | declare <name>
%%          | use <name>
%%          | <blck>
 
stmt([pass|Tail], Tail, pass, _Dec, _Vars).
stmt([use,X|Tail], Tail, use(X), Dec, Dec) :- 
    member(X, Dec), not(nonTerminal(X)).
stmt([declare,X|Tail], Tail, declare(X), Dec, [X|Dec]) :- 
    not(nonTerminal(X)).
stmt(Block, Tail, Parse, Dec, Vars) :-
    blck(Block, Tail, Parse, Dec, Vars).
stmt(Stmt, Parse, Dec, Vars) :-
    stmt(Stmt, [], Parse, Dec, Vars).

stmts(Stmt, Tail, [Parse], Dec, Vars) :- 
    stmt(Stmt, Tail, Parse, Dec, Vars).
stmts([pass|Stmts], Tail, [P|Parse], Dec, Vars) :-
    stmt([pass], P, Dec, Vars), stmts(Stmts, Tail, Parse, Dec, Vars).
stmts([use,X|Stmts], Tail, [P|Parse], Dec, Vars) :-
    stmt([use,X], P, Dec, Dec), stmts(Stmts, Tail, Parse, Dec, Vars).
stmts([declare,X|Stmts], Tail, [P|Parse], Dec, Vars) :-
    stmt([declare,X], P, Dec, NVars), stmts(Stmts, Tail, Parse, NVars, Vars).
stmts([begin|Stmts], Tail, Parse, Dec, Vars) :-
    split(Stmts, end, LStmts, RStmts),
    append([LStmtsParse], RStmtsParse, Parse),
    stmts(LStmts, LStmtsParse, Dec, Vars),
    stmts(RStmts, Tail, RStmtsParse, Dec, Vars).
stmts(Stmts, Parse, Dec, Vars) :-
    stmts(Stmts, [], Parse, Dec, Vars).

blck([begin,end|Tail], Tail, Parse, [], []) :-
    Parse = [].
%% blck([begin|Stmts], Tail, Parse, Dec, Vars) :-
%%     stmts(Stmts, [end|Tail], Parse, Dec, Vars).
blck([begin|Stmts], Tail, Parse, Dec, Vars) :-
    split(Stmts, end, RStmts, Tail), stmts(RStmts, Parse, Dec, Vars).
blck(Block, Parse, Dec, Vars) :-
    blck(Block, [], Parse, Dec, Vars).

legal(Block, Parse) :-
    blck(Block, Parse).


nonTerminal(pass).
nonTerminal(use).
nonTerminal(declare).
nonTerminal(begin).
nonTerminal(end).

split(List, Pivot, Left, Right) :- append(Left, [Pivot|Right], List).